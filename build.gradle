import de.itemis.mps.gradle.*

import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.time.format.FormatStyle

//will pull the groovy classes/types from nexus to the classpath
buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://artifacts.itemis.cloud/repository/maven-mps' }
    }
    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:1.2.175.cc60dc8'
    }
}

plugins {
    id 'base'
    id 'maven-publish'
    id "co.riiid.gradle" version "0.4.2"
}

def incrementalBuild = !project.hasProperty("disableIncrementalBuild")
def artifactsDir = new File(buildDir, 'artifacts')

configurations {
    mps
	languageLibs
    junitAnt
}

dependencies {
    mps "com.jetbrains:mps:2020.3.+"
	languageLibs "com.mbeddr:mbeddr:2020.3.+"
    junitAnt 'org.apache.ant:ant-junit:1.10.6'
}

repositories {
        maven {
            url 'https://artifacts.itemis.cloud/repository/maven-mps'
        }

    mavenCentral()
}

task resolveMps(type: Copy) {
    dependsOn configurations.mps
    from {
        configurations.mps.resolve().collect { zipTree(it) }
    }
    into "$buildDir/mps"
}

task resolveAllLanguageLibs(type: Copy) {
    from {
        configurations.languageLibs.resolve().collect { zipTree(it) }
    }
    into "$buildDir/dependencies"
}

def javafxVersion = project.findProperty("javafxVersion")
def pluginVersion = project.findProperty("pluginVersion")

// Default arguments for ant scripts
def defaultScriptArgs = [
        'mps.home'                          : resolveMps.destinationDir,
        'javafx.home'                       : projectDir,
		'javafx.version'                    : javafxVersion,
		'plugin.version'                    : pluginVersion,
        'build.dir'                         : buildDir,
        'mps.generator.skipUnmodifiedModels': incrementalBuild
]
def defaultScriptClasspath = project.configurations.junitAnt.fileCollection { true }

// enables https://github.com/mbeddr/mps-gradle-plugin#providing-global-defaults
ext["itemis.mps.gradle.ant.defaultScriptArgs"] = defaultScriptArgs.collect { "-D$it.key=$it.value".toString() }
ext["itemis.mps.gradle.ant.defaultScriptClasspath"] = defaultScriptClasspath

task buildLanguages(type: BuildLanguages, dependsOn: [resolveMps, resolveAllLanguageLibs]) {
    script "build.xml"
}

task packageLanguages(type: Zip, dependsOn: buildLanguages) {
    archiveBaseName = 'plugin-${javafxVersion}-${pluginVersion}'
    from "${artifactsDir}/JavaFX"
    include 'JavaFX/**'
}

task setup {
    dependsOn resolveAllLanguageLibs
    description 'Set up MPS project libraries. Libraries are read in from projectlibraries.properties file.'
}

def releaseArtifacts = ["${artifactsDir}/JavaFX/plugin-${javafxVersion}-${pluginVersion}.zip"]

github {
    owner = 'DSLFoundry'
    repo = 'mps-javafx'
    token =  System.getenv().GITHUB_TOKEN != null ? System.getenv().GITHUB_TOKEN : "empty"
    tagName =  "v-$javafxVersion-$pluginVersion"
    targetCommitish = System.getenv().CI_COMMIT_SHA != null ? System.getenv().CI_COMMIT_SHA : "master"
    name =  "JavaFX stubs v$javafxVersion (plugin v$pluginVersion)"
    assets = releaseArtifacts
    // body = ReleaseNotes.getReleaseNotes(file("RELEASE_NOTES.md"))
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/DSLFoundry/mps-javafx")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    
    publications {
        gpr(MavenPublication) {
            groupId = 'com.dslfoundry.javafx'
            artifactId = 'plugin'
            version = "$javafxVersion-$pluginVersion"
            
            artifacts = [packageLanguages]
            pom {
                name = "JavaFX stubs"
                url = "https://github.com/DSLFoundry/mps-javafx"
            }
        }
    }
}

build.dependsOn buildLanguages
githubRelease.dependsOn build

defaultTasks 'buildLanguages'

publish.dependsOn build