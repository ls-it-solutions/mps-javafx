import de.itemis.mps.gradle.*
import org.apache.commons.lang.SystemUtils

//will pull the groovy classes/types from nexus to the classpath
buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://artifacts.itemis.cloud/repository/maven-mps' }
    }
    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:1.2.175.cc60dc8'
        classpath 'commons-lang:commons-lang:2.6'
    }
}

plugins {
    id 'base'
    id 'maven-publish'
    id "co.riiid.gradle" version "0.4.2"
}

def incrementalBuild = !project.hasProperty("disableIncrementalBuild")
def artifactsDir = new File(buildDir, 'artifacts')

configurations {
    mps
    junitAnt
}

def javafxVersion = project.findProperty("javafxVersion")
def pluginVersion = project.findProperty("pluginVersion")

dependencies {
    mps "com.jetbrains:mps:2021.3.2"
    junitAnt 'org.apache.ant:ant-junit:1.10.6'
}

def jfxArtifacts = ["base", "controls", "fxml", "graphics", "media", "swing", "web"]
def jfxPlatforms = ["linux", "mac", "win"]
def targetCpuArchs = ["x64", "aarch64"]
def sourceCpuArchs = ["x64": "", "aarch64": "-aarch64"]
def jfxPlatformMap = ["linux": "linux", "mac": "macos", "win": "win"]
def jfxDocs = [/*"javadoc",*/ "sources"]
def currentPlatform = SystemUtils.IS_OS_MAC?"mac":SystemUtils.IS_OS_LINUX?"linux":SystemUtils.IS_OS_WINDOWS?"win":""
def currentCpuArch = SystemUtils.OS_ARCH == "x86_64" ? "x64" : SystemUtils.OS_ARCH

jfxPlatforms.each { String platform ->
    targetCpuArchs.takeWhile {!(platform=="win" && it == "aarch64") }.each { String targetCpu ->
        def sourceCpu = sourceCpuArchs[targetCpu]
        def configurationName = "javafx$platform$targetCpu"
        def configuration = configurations.create(configurationName)
        // Dependency format: "group:name:version:classifier@extension"
        // standard extension is .jar
        jfxArtifacts.each { String jfxArtifact ->
            dependencies.add(configurationName, "org.openjfx:javafx-$jfxArtifact:$javafxVersion:$platform$sourceCpu", { transitive(false) })
            jfxDocs.each { String doc ->
                dependencies.add(configurationName, "org.openjfx:javafx-$jfxArtifact:$javafxVersion:$doc", { transitive(false) })
            }
        }
        def resolveTask = tasks.register("resolveJavaFxLibsFor$platform$targetCpu", Copy) {
            dependsOn configuration
            group "build setup"
            def jars = configuration.resolve()
            def fxv = "-$javafxVersion"
            def fxp = "-$platform$sourceCpu"
            def graphicsJarFilename = "javafx-graphics$fxv${fxp}.jar"
            def graphicsJar = jars.find { it.name.contains(graphicsJarFilename) }
            from jars
            from zipTree(graphicsJar).files.find { it.name == "javafx-swt.jar" }
            into "$buildDir/lib/$platform-$targetCpu"
            rename {
                it.replace(fxv, "").replace(fxp, "")
            }
        }

        tasks.register("package$platform$targetCpu", Zip) {
            group "publishing"
            dependsOn resolveTask, buildLanguages
            def cpuArchitecture = targetCpu
            archiveBaseName = "plugin-${javafxVersion}-${pluginVersion}"
            archiveClassifier = "${jfxPlatformMap[platform]}-$cpuArchitecture"
            from("${artifactsDir}/JavaFX") {
                include('JavaFX/**')
                exclude("JavaFX/lib/**.jar")
            }
            from("$buildDir/lib/$platform-$targetCpu") {
                into("JavaFX/lib/")
            }
        }
    }
}
def resolveCurrentPlatformLibs = tasks.register("resolveCurrentPlatformLibs", Copy) {
    dependsOn "resolveJavaFxLibsFor$currentPlatform$currentCpuArch"
    from ("$buildDir/lib/$currentPlatform-$currentCpuArch")
    into ("solutions/JavaFX/lib/")
}

repositories {
    maven {
        url 'https://artifacts.itemis.cloud/repository/maven-mps'
    }

    mavenCentral()
}

task resolveMps(type: Copy) {
    dependsOn configurations.mps
    from {
        configurations.mps.resolve().collect { zipTree(it) }
    }
    into "$buildDir/mps"
}

// Default arguments for ant scripts
def defaultScriptArgs = [
        'mps.home'                          : resolveMps.destinationDir,
        'javafx.home'                       : projectDir,
        'javafx.version'                    : javafxVersion,
        'plugin.version'                    : pluginVersion,
        'build.dir'                         : buildDir,
        'mps.generator.skipUnmodifiedModels': incrementalBuild
]
def defaultScriptClasspath = project.configurations.junitAnt.fileCollection { true }

// enables https://github.com/mbeddr/mps-gradle-plugin#providing-global-defaults
ext["itemis.mps.gradle.ant.defaultScriptArgs"] = defaultScriptArgs.collect { "-D$it.key=$it.value".toString() }
ext["itemis.mps.gradle.ant.defaultScriptClasspath"] = defaultScriptClasspath

task buildLanguages(type: BuildLanguages, dependsOn: [resolveMps, resolveCurrentPlatformLibs]) {
    script "build.xml"
    outputs.dir("${artifactsDir}/JavaFX")
}

task packageLanguages(type: Zip, dependsOn: buildLanguages) {
    archiveBaseName = 'plugin-${javafxVersion}-${pluginVersion}'
    from "${artifactsDir}/JavaFX"
    include 'JavaFX/**'
}

task setup {
    dependsOn resolveCurrentPlatformLibs
    description 'Set up JavaFX libraries for MPS'
}

def releaseArtifacts = ["${artifactsDir}/JavaFX/plugin-${javafxVersion}-${pluginVersion}.zip"]

github {
    owner = 'DSLFoundry'
    repo = 'mps-javafx'
    token = System.getenv().GITHUB_TOKEN != null ? System.getenv().GITHUB_TOKEN : "empty"
    tagName = "v-$javafxVersion-$pluginVersion"
    targetCommitish = System.getenv().CI_COMMIT_SHA != null ? System.getenv().CI_COMMIT_SHA : "master"
    name = "JavaFX stubs v$javafxVersion (plugin v$pluginVersion)"
    assets = releaseArtifacts
    // body = ReleaseNotes.getReleaseNotes(file("RELEASE_NOTES.md"))
}

publishing {
    repositories {
        maven {
            name = "ItemisRapidFX"
            url  = "https://artifacts.itemis.cloud/repository/maven-rapidfx-releases"
            credentials {
                username = project.findProperty("nexusUsername")
                password = project.findProperty("nexusPassword")
            }
        }
//        maven {
//            name = "GitHubPackages"
//            url = uri("https://maven.pkg.github.com/DSLFoundry/mps-javafx")
//            credentials {
//                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
//                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
//            }
//        }
    }

    publications {
        maven(MavenPublication) {
            groupId = 'com.dslfoundry.javafx'
            artifactId = 'plugin'
            version = "$javafxVersion-$pluginVersion"

            artifacts = jfxPlatforms.collect { String platform ->
                targetCpuArchs.takeWhile { !(platform == "win" && it == "aarch64") }
                        .collect {
                            String targetCpu -> tasks["package$platform$targetCpu"] }
            }.collect().flatten()
            pom {
                name = "JavaFX stubs"
                url = "https://github.com/DSLFoundry/mps-javafx"
            }
        }
//        gpr(MavenPublication) {
//            groupId = 'com.dslfoundry.javafx'
//            artifactId = 'plugin'
//            version = "$javafxVersion-$pluginVersion"
//
//            artifacts = jfxPlatforms.collect {String platform -> tasks["package$platform"] }
//            pom {
//                name = "JavaFX stubs"
//                url = "https://github.com/DSLFoundry/mps-javafx"
//            }
//        }
    }
}

tasks["build"].dependsOn buildLanguages
githubRelease.dependsOn build

defaultTasks 'buildLanguages'

publish.dependsOn build
jfxPlatforms.each { String platform ->
    targetCpuArchs.takeWhile {!(platform=="win" && it == "aarch64") }
            .collect {String targetCpu -> publish.dependsOn tasks["package$platform$targetCpu"]} }

publishToMavenLocal.dependsOn build
jfxPlatforms.each { String platform ->
    targetCpuArchs.takeWhile {!(platform=="win" && it == "aarch64") }
            .collect {String targetCpu -> publishToMavenLocal.dependsOn tasks["package$platform$targetCpu"]} }
